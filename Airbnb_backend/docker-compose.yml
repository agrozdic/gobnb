version: "3.1"

services:

  auth-server:
    build:
      context: ./auth-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${AUTH_SERVICE_HOST}
    hostname: ${AUTH_SERVICE_HOST}
    ports:
      -  ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
      - "446:446"
    environment:
      - PORT=${AUTH_SERVICE_PORT}
      - MONGO_DB_URI=${MONGO_DB_URI}
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - network
    volumes:
      - ./auth-service/auth-service.crt:/app/auth-service.crt
      - ./auth-service/auth-service.key:/app/auth-service.key


  res-server:
    build:
      context: ./reservations-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${RES_SERVICE_HOST}
    hostname: ${RES_SERVICE_HOST}
    ports:
      - ${RES_SERVICE_PORT}:${RES_SERVICE_PORT}
      - "448:448"
    environment:
      - PORT=${RES_SERVICE_PORT}
      - CASS_DB=${CASS_DB}
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - network
    volumes:
      - ./reservations-service/reservations.crt:/app/reservations.crt
      - ./reservations-service/decrypted_key.pem/app/decrypted_key.pem

  acc-server:
    build:
      context: ./accommodations-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${ACC_SERVICE_HOST}
    hostname: ${ACC_SERVICE_HOST}
    ports:
      - ${ACC_SERVICE_PORT}:${ACC_SERVICE_PORT}
      - "447:447"
    environment:
      - PORT=${ACC_SERVICE_PORT}
      - CASS_DB=${CASS_DB}
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - network
    volumes:
      - ./accommodations-service/server.crt:/app/server.crt
      - ./accommodations-service/decrypted_server.key:/app/decrypted_server.key

  profile-server:
    build:
      context: ./profile-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${PROFILE_SERVICE_HOST}
    hostname: ${PROFILE_SERVICE_HOST}
    ports:
      - ${PROFILE_SERVICE_PORT}:${PROFILE_SERVICE_PORT}
      - "444:444"
    environment:
      - PORT=${PROFILE_SERVICE_PORT}
      - MONGO_DB_URI=${MONGO_DB_URI}
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - network
    volumes:
      - ./profile-service/profile-service.crt:/app/profile-service.crt
      - ./profile-service/profile-service.key:/app/profile-service.key

  api_gateway:
    build:
      context: ./api-gateway/
      dockerfile: Dockerfile
    container_name: ${GATEWAY_HOST}
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
      - "443:443"
    depends_on:
      - auth-server
      - res-server
      - acc-server
      - profile-server
    networks:
      - network

  cassandra:
    image: cassandra
    container_name: ${CASS_HOST}
    restart: always
    ports:
      - ${CASS_PORT}:${CASS_PORT}
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster;'"]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data
    networks:
      - network

  mongo:

    image: ${MONGO_IMAGE}
    container_name: ${MONGO_HOST}
    restart: always
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 20s
      retries: 10
    volumes:
      - mongo_store:/data/db
    networks:
      - network

  mongo-express:
    image: mongo-express
    container_name: ${MONGO_EX_HOST}
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=${MONGODB_SERVER}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${BASICAUTH_PASSWORD}
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - ${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}
    volumes:
      - mongo_express_data:/data/db
    networks:
      - network

volumes:
  mongo_store:
  mongo_express_data:
  cass_store:

networks:
  network:
    driver: bridge
