version: "3.8"

services:

  auth-server:
    build:
      context: ./auth-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${AUTH_SERVICE_HOST}
    hostname: ${AUTH_SERVICE_HOST}
    environment:
      - PORT=${AUTH_SERVICE_PORT}
      - MONGO_DB_URI=${MONGO_DB_URI}
      - SECRET_KEY=${SECRET_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
    depends_on:
      mongo:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - network
    volumes:
      - ./auth-service/auth-service.crt:/app/auth-service.crt
      - ./auth-service/auth-service.key:/app/auth-service.key

  res-server:
    build:
      context: ./reservations-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${RES_SERVICE_HOST}
    hostname: ${RES_SERVICE_HOST}
    environment:
      - PORT=${RES_SERVICE_PORT}
      - CASS_DB=${CASS_DB}
      - MONGO_DB_URI=${MONGO_DB_URI}
      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
      - NATS_HOST =${NATS_HOST}
      - NATS_PORT=${NATS_PORT}
      - NATS_USER= ${NATS_USER}
      - NATS_PASS=${NATS_PASS}
      - CREATE_ACCOMMODATION_COMMAND_SUBJECT= ${CREATE_ACCOMMODATION_COMMAND_SUBJECT}
      - CREATE_ACCOMMODATION_REPLY_SUBJECT= ${CREATE_ACCOMMODATION_REPLY_SUBJECT}
    depends_on:
      cassandra:
        condition: service_healthy
      mongo:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - network
    volumes:
      - ./reservations-service/reservation-service.crt:/app/reservation-service.crt
      - ./reservations-service/reservation_decrypted_key.pem:/app/reservation_decrypted_key.pem

  acc-server:
    build:
      context: ./acc-service/
      dockerfile: Dockerfile
    restart: always
    container_name: ${ACC_SERVICE_HOST}
    hostname: ${ACC_SERVICE_HOST}
    environment:
      - PORT=${ACC_SERVICE_PORT}
      - MONGO_DB_URI=${MONGO_DB_URI}
      - HDFS_URI=namenode:9000
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
      - NATS_HOST =${NATS_HOST}
      - NATS_PORT=${NATS_PORT}
      - NATS_USER= ${NATS_USER}
      - NATS_PASS=${NATS_PASS}
      - CREATE_ACCOMMODATION_COMMAND_SUBJECT= ${CREATE_ACCOMMODATION_COMMAND_SUBJECT}
      - CREATE_ACCOMMODATION_REPLY_SUBJECT= ${CREATE_ACCOMMODATION_REPLY_SUBJECT}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      datanode:
        condition: service_healthy
      namenode:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - network
    volumes:
      - ./acc-service/accomm-service.crt:/app/accomm-service.crt
      - ./acc-service/accomm_decrypted_key.pem:/app/accomm_decrypted_key.pem

#  notifications-server:
#    build:
#      context: ./notification-service/
#      dockerfile: Dockerfile
#    restart: always
#    container_name: ${NOTIF_SERVICE_HOST}
#    hostname: ${NOTIF_SERVICE_HOST}
#    environment:
#      - PORT=${NOTIF_SERVICE_PORT}
#      - MONGO_DB_URI=${MONGO_DB_URI}
#      - SECRET_KEY=${SECRET_KEY}
#      - SMTP_HOST=${SMTP_HOST}
#      - SMTP_PASS=${SMTP_PASS}
#      - SMTP_PORT=${SMTP_PORT}
#      - SMTP_USER=${SMTP_USER}
#      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
#    depends_on:
#      mongo:
#        condition: service_healthy
#    networks:
#      - network
#    volumes:
#      - ./notification-service/notifications-service.crt:/app/notifications-service.crt
#      - ./notification-service/notifications_decrypted_key.pem:/app/notifications_decrypted_key.pem
#
#  profile-server:
#    build:
#      context: ./profile-service/
#      dockerfile: Dockerfile
#    restart: always
#    container_name: ${PROFILE_SERVICE_HOST}
#    hostname: ${PROFILE_SERVICE_HOST}
#    environment:
#      - PORT=${PROFILE_SERVICE_PORT}
#      - MONGO_DB_URI=${MONGO_DB_URI}
#      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
#    depends_on:
#      mongo:
#        condition: service_healthy
#      jaeger:
#        condition: service_started
#    networks:
#      - network
#    volumes:
#      - ./profile-service/profile-service.crt:/app/profile-service.crt
#      - ./profile-service/profile-service.key:/app/profile-service.key
#
#  rating-server:
#    build:
#      context: ./rating-service/
#      dockerfile: Dockerfile
#    restart: always
#    container_name: ${RATING_SERVICE_HOST}
#    hostname: ${RATING_SERVICE_HOST}
#    environment:
#      - PORT=${RATING_SERVICE_PORT}
#      - MONGO_DB_URI=${MONGO_DB_URI}
#      - JAEGER_ADDRESS=${JAEGER_ADDRESS}
#    depends_on:
#      mongo:
#        condition: service_healthy
#      jaeger:
#        condition: service_started
#    networks:
#      - network
#    volumes:
#      - ./rating-service/rating-service.crt:/app/rating-service.crt
#      - ./rating-service/rating-service.key:/app/rating-service.key

  api_gateway:
    build:
      context: ./api-gateway/
      dockerfile: Dockerfile
    container_name: ${GATEWAY_HOST}
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    depends_on:
      - auth-server
      - res-server
      - acc-server
#      - profile-server
#      - rating-server
#      - notifications-server
    networks:
      - network
    volumes:
      - ./api-gateway/api-gateway.crt:/app/api-gateway.crt
      - ./api-gateway/api-gateway.key:/app/api-gateway.key

  cassandra:
    image: cassandra
    container_name: ${CASS_HOST}
    restart: always
    ports:
      - ${CASS_PORT}:${CASS_PORT}
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster;'"]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data
    networks:
      - network

  mongo:
    image: ${MONGO_IMAGE}
    container_name: ${MONGO_HOST}
    restart: always
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 20s
      retries: 10
    volumes:
      - mongo_store:/data/db
    networks:
      - network

  mongo-express:
    image: mongo-express
    container_name: ${MONGO_EX_HOST}
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=${MONGODB_SERVER}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${BASICAUTH_PASSWORD}
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - ${MONGO_EXPRESS_PORT}:${MONGO_EXPRESS_PORT}
    volumes:
      - mongo_express_data:/data/db
    networks:
      - network

  redis:
    container_name: ${REDIS_HOST}
    image: redis
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: "redis-server --save 20 1 --loglevel warning"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - network

    # HDFS - Namenode

  namenode:
      image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
      container_name: namenode
      ports:
        - "9870:9870"
        - "9000:9000"
      volumes:
        - hadoop_namenode:/hadoop/dfs/name
      environment:
        - CLUSTER_NAME=gobnb
      env_file:
        - ./.env
      networks:
        - network

  datanode:
        image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
        container_name: datanode
        volumes:
          - hadoop_datanode:/hadoop/dfs/data
        environment:
          SERVICE_PRECONDITION: "namenode:9870"
        healthcheck:
          test: [ "CMD", "curl", "-f", "http://localhost:${HDFS_DATANODE_PORT}/" ]
          interval: 15s
          timeout: 5s
          retries: 3
        networks:
          - network
        env_file:
          - ./.env

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - network
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:16686/" ]
      interval: 10s
      timeout: 5s
      retries: 3

  collector:
    container_name: collector
    image: otel/opentelemetry-collector:0.69.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./api-gateway/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - network

volumes:
  mongo_store:
  mongo_express_data:
  cass_store:
  redis_data:
  hadoop_namenode:
  hadoop_datanode:

networks:
  network:
    driver: bridge